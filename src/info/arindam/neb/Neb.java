package info.arindam.neb;

import java.awt.Dimension;
import java.awt.Font;
import java.awt.Graphics;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.image.BufferedImage;
import java.util.Iterator;
import java.util.LinkedHashMap;
import java.util.Map;
import javax.swing.DefaultComboBoxModel;
import javax.swing.GroupLayout;
import javax.swing.JButton;
import javax.swing.JComboBox;
import javax.swing.JLabel;
import javax.swing.JPanel;
import javax.swing.JProgressBar;
import javax.swing.JScrollPane;
import javax.swing.JTextArea;
import javax.swing.JTextField;
import javax.swing.LayoutStyle;

/**
 *
 * @author Arindam Biswas <arindam dot b at eml dot cc>
 */
public class Neb extends JPanel implements Engine.Listener {
    private final Engine engine;
    private int renderedNegativeCount;

    /**
     * Creates new form Neb
     */
    public Neb() {
        initComponents();
        engine = new Engine(this);
        engine.setAlgorithm((String) algorithmList.getSelectedItem());
        engine.start();
    }

    /**
     * This method is called from within the constructor to initialize the form. WARNING: Do NOT
     * modify this code. The content of this method is always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jTextField1 = new JTextField();
        dashboard = new JPanel();
        algorithmLabel = new JLabel();
        algorithmList = new JComboBox();
        parameterLabel = new JLabel();
        parameter1Label = new JLabel();
        parameter2Label = new JLabel();
        parameter3Label = new JLabel();
        parameter4Label = new JLabel();
        parameter5Label = new JLabel();
        parameter6Label = new JLabel();
        parameter7Label = new JLabel();
        parameter8Label = new JLabel();
        parameter9Label = new JLabel();
        parameter10Label = new JLabel();
        parameter1Value = new JTextField();
        parameter2Value = new JTextField();
        parameter3Value = new JTextField();
        parameter4Value = new JTextField();
        parameter5Value = new JTextField();
        parameter6Value = new JTextField();
        parameter7Value = new JTextField();
        parameter8Value = new JTextField();
        parameter9Value = new JTextField();
        parameter10Value = new JTextField();
        resetButton = new JButton();
        applyButton = new JButton();
        logLabel = new JLabel();
        renderButton = new JButton();
        logPane = new JScrollPane();
        logArea = new JTextArea();
        statusLabel = new JLabel();
        progressBar = new JProgressBar();
        canvas = new Canvas();

        jTextField1.setText("jTextField1");

        algorithmLabel.setFont(algorithmLabel.getFont().deriveFont(algorithmLabel.getFont().getStyle() | Font.BOLD));
        algorithmLabel.setText("Algorithm");

        algorithmList.setModel(new DefaultComboBoxModel(new String[] { "bbrot", "mbrot" }));
        algorithmList.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                algorithmListActionPerformed(evt);
            }
        });

        parameterLabel.setFont(parameterLabel.getFont().deriveFont(parameterLabel.getFont().getStyle() | Font.BOLD));
        parameterLabel.setText("Parameters");

        parameter1Label.setText("1");

        parameter2Label.setText("2");

        parameter3Label.setText("3");

        parameter4Label.setText("4");

        parameter5Label.setText("5");

        parameter6Label.setText("6");

        parameter7Label.setText("7");

        parameter8Label.setText("8");

        parameter9Label.setText("9");

        parameter10Label.setText("10");

        parameter1Value.setText("--");

        parameter2Value.setText("--");

        parameter3Value.setText("--");

        parameter4Value.setText("--");

        parameter5Value.setText("--");

        parameter6Value.setText("--");

        parameter7Value.setText("--");

        parameter8Value.setText("--");

        parameter9Value.setText("--");

        parameter10Value.setText("--");

        resetButton.setText("Reset");
        resetButton.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                resetButtonActionPerformed(evt);
            }
        });

        applyButton.setText("Apply");
        applyButton.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                applyButtonActionPerformed(evt);
            }
        });

        logLabel.setFont(logLabel.getFont().deriveFont(logLabel.getFont().getStyle() | Font.BOLD));
        logLabel.setText("Log");

        renderButton.setText("Render");
        renderButton.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                renderButtonActionPerformed(evt);
            }
        });

        logArea.setEditable(false);
        logPane.setViewportView(logArea);

        GroupLayout dashboardLayout = new GroupLayout(dashboard);
        dashboard.setLayout(dashboardLayout);
        dashboardLayout.setHorizontalGroup(dashboardLayout.createParallelGroup(GroupLayout.Alignment.LEADING)
            .addGroup(GroupLayout.Alignment.TRAILING, dashboardLayout.createSequentialGroup()
                .addGroup(dashboardLayout.createParallelGroup(GroupLayout.Alignment.LEADING)
                    .addComponent(parameter1Label)
                    .addComponent(parameter2Label)
                    .addComponent(parameter3Label)
                    .addComponent(parameter4Label)
                    .addComponent(parameter5Label)
                    .addComponent(parameter6Label)
                    .addComponent(parameter7Label)
                    .addComponent(parameter8Label)
                    .addComponent(parameter9Label)
                    .addComponent(parameterLabel)
                    .addComponent(parameter10Label)
                    .addComponent(algorithmLabel))
                .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(dashboardLayout.createParallelGroup(GroupLayout.Alignment.LEADING, false)
                    .addComponent(parameter9Value, GroupLayout.Alignment.TRAILING)
                    .addComponent(parameter8Value, GroupLayout.Alignment.TRAILING)
                    .addComponent(parameter7Value, GroupLayout.Alignment.TRAILING)
                    .addComponent(parameter6Value, GroupLayout.Alignment.TRAILING)
                    .addComponent(parameter4Value, GroupLayout.Alignment.TRAILING)
                    .addComponent(parameter3Value, GroupLayout.Alignment.TRAILING)
                    .addComponent(parameter2Value, GroupLayout.Alignment.TRAILING)
                    .addComponent(parameter1Value, GroupLayout.Alignment.TRAILING)
                    .addComponent(algorithmList, GroupLayout.Alignment.TRAILING, 0, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(parameter5Value, GroupLayout.Alignment.TRAILING)
                    .addComponent(parameter10Value)))
            .addGroup(GroupLayout.Alignment.TRAILING, dashboardLayout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addComponent(renderButton))
            .addGroup(GroupLayout.Alignment.TRAILING, dashboardLayout.createSequentialGroup()
                .addComponent(resetButton)
                .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(applyButton))
            .addGroup(dashboardLayout.createSequentialGroup()
                .addComponent(logLabel)
                .addGap(0, 0, Short.MAX_VALUE))
            .addComponent(logPane, GroupLayout.Alignment.TRAILING)
        );
        dashboardLayout.setVerticalGroup(dashboardLayout.createParallelGroup(GroupLayout.Alignment.LEADING)
            .addGroup(dashboardLayout.createSequentialGroup()
                .addGroup(dashboardLayout.createParallelGroup(GroupLayout.Alignment.BASELINE)
                    .addComponent(algorithmLabel)
                    .addComponent(algorithmList, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE))
                .addGap(29, 29, 29)
                .addComponent(parameterLabel)
                .addPreferredGap(LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(dashboardLayout.createParallelGroup(GroupLayout.Alignment.BASELINE)
                    .addComponent(parameter1Label)
                    .addComponent(parameter1Value, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(dashboardLayout.createParallelGroup(GroupLayout.Alignment.BASELINE)
                    .addComponent(parameter2Label)
                    .addComponent(parameter2Value, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(dashboardLayout.createParallelGroup(GroupLayout.Alignment.BASELINE)
                    .addComponent(parameter3Label)
                    .addComponent(parameter3Value, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(dashboardLayout.createParallelGroup(GroupLayout.Alignment.BASELINE)
                    .addComponent(parameter4Label)
                    .addComponent(parameter4Value, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(dashboardLayout.createParallelGroup(GroupLayout.Alignment.BASELINE)
                    .addComponent(parameter5Label)
                    .addComponent(parameter5Value, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(dashboardLayout.createParallelGroup(GroupLayout.Alignment.BASELINE)
                    .addComponent(parameter6Label)
                    .addComponent(parameter6Value, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(dashboardLayout.createParallelGroup(GroupLayout.Alignment.BASELINE)
                    .addComponent(parameter7Label)
                    .addComponent(parameter7Value, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(dashboardLayout.createParallelGroup(GroupLayout.Alignment.BASELINE)
                    .addComponent(parameter8Label)
                    .addComponent(parameter8Value, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(dashboardLayout.createParallelGroup(GroupLayout.Alignment.BASELINE)
                    .addComponent(parameter9Label)
                    .addComponent(parameter9Value, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(dashboardLayout.createParallelGroup(GroupLayout.Alignment.BASELINE)
                    .addComponent(parameter10Label)
                    .addComponent(parameter10Value, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(dashboardLayout.createParallelGroup(GroupLayout.Alignment.BASELINE)
                    .addComponent(resetButton)
                    .addComponent(applyButton))
                .addGap(18, 18, 18)
                .addComponent(logLabel)
                .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(logPane, GroupLayout.DEFAULT_SIZE, 105, Short.MAX_VALUE)
                .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(renderButton))
        );

        statusLabel.setText("Idle.");

        GroupLayout canvasLayout = new GroupLayout(canvas);
        canvas.setLayout(canvasLayout);
        canvasLayout.setHorizontalGroup(canvasLayout.createParallelGroup(GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );
        canvasLayout.setVerticalGroup(canvasLayout.createParallelGroup(GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );

        GroupLayout layout = new GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(layout.createParallelGroup(GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(statusLabel)
                        .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED, 616, Short.MAX_VALUE)
                        .addComponent(progressBar, GroupLayout.PREFERRED_SIZE, 189, GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(canvas, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGap(18, 18, 18)
                        .addComponent(dashboard, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(layout.createParallelGroup(GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(GroupLayout.Alignment.LEADING)
                    .addComponent(dashboard, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(canvas, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(GroupLayout.Alignment.LEADING)
                    .addComponent(progressBar, GroupLayout.Alignment.TRAILING, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
                    .addComponent(statusLabel, GroupLayout.Alignment.TRAILING))
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents

    private void algorithmListActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_algorithmListActionPerformed
        engine.setAlgorithm((String) algorithmList.getSelectedItem());
    }//GEN-LAST:event_algorithmListActionPerformed

    private void resetButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_resetButtonActionPerformed
        engine.resetParameters();
    }//GEN-LAST:event_resetButtonActionPerformed

    private void applyButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_applyButtonActionPerformed
        LinkedHashMap<String, String> parameters = new LinkedHashMap<>();
        parameters.put(parameter1Label.getText(), parameter1Value.getText());
        parameters.put(parameter2Label.getText(), parameter2Value.getText());
        parameters.put(parameter3Label.getText(), parameter3Value.getText());
        parameters.put(parameter4Label.getText(), parameter4Value.getText());
        parameters.put(parameter5Label.getText(), parameter5Value.getText());
        parameters.put(parameter6Label.getText(), parameter6Value.getText());
        parameters.put(parameter7Label.getText(), parameter7Value.getText());
        parameters.put(parameter8Label.getText(), parameter8Value.getText());
        parameters.put(parameter9Label.getText(), parameter9Value.getText());
        parameters.put(parameter10Label.getText(), parameter10Value.getText());
        engine.setParameters(parameters);
    }//GEN-LAST:event_applyButtonActionPerformed

    private void renderButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_renderButtonActionPerformed
        engine.render();
    }//GEN-LAST:event_renderButtonActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private JLabel algorithmLabel;
    private JComboBox algorithmList;
    private JButton applyButton;
    private Canvas canvas;
    private JPanel dashboard;
    private JTextField jTextField1;
    private JTextArea logArea;
    private JLabel logLabel;
    private JScrollPane logPane;
    private JLabel parameter10Label;
    private JTextField parameter10Value;
    private JLabel parameter1Label;
    private JTextField parameter1Value;
    private JLabel parameter2Label;
    private JTextField parameter2Value;
    private JLabel parameter3Label;
    private JTextField parameter3Value;
    private JLabel parameter4Label;
    private JTextField parameter4Value;
    private JLabel parameter5Label;
    private JTextField parameter5Value;
    private JLabel parameter6Label;
    private JTextField parameter6Value;
    private JLabel parameter7Label;
    private JTextField parameter7Value;
    private JLabel parameter8Label;
    private JTextField parameter8Value;
    private JLabel parameter9Label;
    private JTextField parameter9Value;
    private JLabel parameterLabel;
    private JProgressBar progressBar;
    private JButton renderButton;
    private JButton resetButton;
    private JLabel statusLabel;
    // End of variables declaration//GEN-END:variables

    @Override
    public void renderingBegun() {
        statusLabel.setText("Rendering begun.");
        progressBar.setIndeterminate(true);
    }

    @Override
    public void renderingPaused() {
        statusLabel.setText("Rendering paused.");
        progressBar.setString("paused");
    }

    @Override
    public void renderingResumed() {
        statusLabel.setText("Rendering resumed.");
        progressBar.setString(null);
    }

    @Override
    public void renderingEnded() {
        new Thread() {
            @Override
            public void run() {
                canvas.setImage(engine.getPositive());
            }
        }.start();
        progressBar.setIndeterminate(false);
        statusLabel.setText("Rendering ended.");
    }

    @Override
    public void errorOccurred() {

    }

    @Override
    public void algorithmSet(LinkedHashMap<String, String> newParameters) {
        Iterator i = newParameters.entrySet().iterator();
        Map.Entry p = (Map.Entry) i.next();
        parameter1Label.setText((String) p.getKey());
        parameter1Value.setText((String) p.getValue());
        p = (Map.Entry) i.next();
        parameter2Label.setText((String) p.getKey());
        parameter2Value.setText((String) p.getValue());
        p = (Map.Entry) i.next();
        parameter3Label.setText((String) p.getKey());
        parameter3Value.setText((String) p.getValue());
        p = (Map.Entry) i.next();
        parameter4Label.setText((String) p.getKey());
        parameter4Value.setText((String) p.getValue());
        p = (Map.Entry) i.next();
        parameter5Label.setText((String) p.getKey());
        parameter5Value.setText((String) p.getValue());
        p = (Map.Entry) i.next();
        parameter6Label.setText((String) p.getKey());
        parameter6Value.setText((String) p.getValue());
        p = (Map.Entry) i.next();
        parameter7Label.setText((String) p.getKey());
        parameter7Value.setText((String) p.getValue());
        p = (Map.Entry) i.next();
        parameter8Label.setText((String) p.getKey());
        parameter8Value.setText((String) p.getValue());
        p = (Map.Entry) i.next();
        parameter9Label.setText((String) p.getKey());
        parameter9Value.setText((String) p.getValue());
        p = (Map.Entry) i.next();
        parameter10Label.setText((String) p.getKey());
        parameter10Value.setText((String) p.getValue());
        statusLabel.setText("Algorithm set.");
    }

    @Override
    public void parametersSet() {
        statusLabel.setText("Parameters set.");
    }

    @Override
    public void parametersReset(LinkedHashMap<String, String> newParameters) {
        Iterator i = newParameters.entrySet().iterator();
        Map.Entry p = (Map.Entry) i.next();
        parameter1Label.setText((String) p.getKey());
        parameter1Value.setText((String) p.getValue());
        p = (Map.Entry) i.next();
        parameter2Label.setText((String) p.getKey());
        parameter2Value.setText((String) p.getValue());
        p = (Map.Entry) i.next();
        parameter3Label.setText((String) p.getKey());
        parameter3Value.setText((String) p.getValue());
        p = (Map.Entry) i.next();
        parameter4Label.setText((String) p.getKey());
        parameter4Value.setText((String) p.getValue());
        p = (Map.Entry) i.next();
        parameter5Label.setText((String) p.getKey());
        parameter5Value.setText((String) p.getValue());
        p = (Map.Entry) i.next();
        parameter6Label.setText((String) p.getKey());
        parameter6Value.setText((String) p.getValue());
        p = (Map.Entry) i.next();
        parameter7Label.setText((String) p.getKey());
        parameter7Value.setText((String) p.getValue());
        p = (Map.Entry) i.next();
        parameter8Label.setText((String) p.getKey());
        parameter8Value.setText((String) p.getValue());
        p = (Map.Entry) i.next();
        parameter9Label.setText((String) p.getKey());
        parameter9Value.setText((String) p.getValue());
        p = (Map.Entry) i.next();
        parameter10Label.setText((String) p.getKey());
        parameter10Value.setText((String) p.getValue());
        statusLabel.setText("Parameters reset.");
    }

    @Override
    public void log(String message) {
        logArea.append(message + "\n");
    }

    @Override
    public synchronized void negativeRendered() {
        renderedNegativeCount++;
        if (renderedNegativeCount % 10000 == 0) {
            new Thread() {
                @Override
                public void run() {
                    canvas.setImage(engine.getPositive());
                }
            }.start();
        }
        statusLabel.setText("Negative rendered.");
    }

    public static class Canvas extends JPanel {

        private BufferedImage image;

        /**
         * Creates new form Panel
         */
        public Canvas() {
            super();
            initComponents();
        }

        public void setImage(BufferedImage image) {
            this.image = image;
            repaint();
        }

        @Override
        public void paintComponent(Graphics g) {
            super.paintComponents(g);
            g.drawImage(image, 0, 0, null);
        }

        /**
         * This method is called from within the constructor to initialize the form. WARNING: Do NOT
         * modify this code. The content of this method is always regenerated by the Form Editor.
         */
        // <editor-fold defaultstate="collapsed" desc="Generated Code">
        @SuppressWarnings(value = "unchecked")
        private void initComponents() {
            setMinimumSize(new Dimension(640, 640));
            GroupLayout layout = new GroupLayout(this);
            this.setLayout(layout);
            layout.setHorizontalGroup(layout.createParallelGroup(GroupLayout.Alignment.LEADING).addGap(0, 640, Short.MAX_VALUE));
            layout.setVerticalGroup(layout.createParallelGroup(GroupLayout.Alignment.LEADING).addGap(0, 640, Short.MAX_VALUE));
        } // </editor-fold>
        // Variables declaration - do not modify
        // End of variables declaration
    }
}
